{
  "version": 3,
  "sources": ["../lib/formatter.js"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports)\n    : typeof define === 'function' && define.amd ? define('jsonlint-formatter', ['exports'], factory)\n      : (global = global || self, factory(global.jsonlintFormatter = {}))\n}(this, function (exports) {\n  'use strict'\n\n  /**\n   * Manual formatter taken straight from https://github.com/umbrae/jsonlintdotcom\n   *\n   * jsl.format - Provide json reformatting in a character-by-character approach,\n   *   so that even invalid JSON may be reformatted (to the best of its ability).\n   *\n   */\n\n  function repeat (s, count) {\n    return new Array(count + 1).join(s)\n  }\n\n  function format (json, indent) {\n    let i = 0\n    let length = 0\n    const indentString = indent !== undefined\n      ? typeof indent === 'number'\n        ? new Array(indent + 1).join(' ')\n        : indent\n      : '  '\n    let outputString = ''\n    let indentLevel = 0\n    let inString\n    let currentChar\n\n    for (i = 0, length = json.length; i < length; i += 1) {\n      currentChar = json.charAt(i)\n      switch (currentChar) {\n        case '{':\n        case '[':\n          if (!inString) {\n            outputString += `${currentChar}\\n${repeat(indentString, indentLevel + 1)}`\n            indentLevel += 1\n          } else {\n            outputString += currentChar\n          }\n          break\n        case '}':\n        case ']':\n          if (!inString) {\n            indentLevel -= 1\n            outputString += `\\n${repeat(indentString, indentLevel)}${currentChar}`\n          } else {\n            outputString += currentChar\n          }\n          break\n        case ',':\n          if (!inString) {\n            outputString += `,\\n${repeat(indentString, indentLevel)}`\n          } else {\n            outputString += currentChar\n          }\n          break\n        case ':':\n          if (!inString) {\n            outputString += ': '\n          } else {\n            outputString += currentChar\n          }\n          break\n        case ' ':\n        case '\\n':\n        case '\\t':\n          if (inString) {\n            outputString += currentChar\n          }\n          break\n        case '\"':\n          if (i > 0 && json.charAt(i - 1) !== '\\\\') {\n            inString = !inString\n          }\n          outputString += currentChar\n          break\n        default:\n          outputString += currentChar\n          break\n      }\n    }\n\n    return outputString\n  }\n\n  exports.format = format\n\n  Object.defineProperty(exports, '__esModule', { value: true })\n}))\n"],
  "mappings": "CAAC,SAAUA,EAAQC,EAAS,CAC1B,OAAO,SAAY,UAAY,OAAO,OAAW,IAAcA,EAAQ,OAAO,EAC1E,OAAO,QAAW,YAAc,OAAO,IAAM,OAAO,qBAAsB,CAAC,SAAS,EAAGA,CAAO,GAC3FD,EAASA,GAAU,KAAMC,EAAQD,EAAO,kBAAoB,CAAC,CAAC,EACvE,GAAE,KAAM,SAAUE,EAAS,CACzB,aAUA,SAASC,EAAQ,EAAGC,EAAO,CACzB,OAAO,IAAI,MAAMA,EAAQ,CAAC,EAAE,KAAK,CAAC,CACpC,CAEA,SAASC,EAAQC,EAAMC,EAAQ,CAC7B,IAAIC,EAAI,EACJC,EAAS,EACb,MAAMC,EAAeH,IAAW,OAC5B,OAAOA,GAAW,SAChB,IAAI,MAAMA,EAAS,CAAC,EAAE,KAAK,GAAG,EAC9BA,EACF,KACJ,IAAII,EAAe,GACfC,EAAc,EACdC,EACAC,EAEJ,IAAKN,EAAI,EAAGC,EAASH,EAAK,OAAQE,EAAIC,EAAQD,GAAK,EAEjD,OADAM,EAAcR,EAAK,OAAOE,CAAC,EACnBM,EAAa,CACnB,IAAK,IACL,IAAK,IACED,EAIHF,GAAgBG,GAHhBH,GAAgB,GAAGG,CAAW;AAAA,EAAKX,EAAOO,EAAcE,EAAc,CAAC,CAAC,GACxEA,GAAe,GAIjB,MACF,IAAK,IACL,IAAK,IACEC,EAIHF,GAAgBG,GAHhBF,GAAe,EACfD,GAAgB;AAAA,EAAKR,EAAOO,EAAcE,CAAW,CAAC,GAAGE,CAAW,IAItE,MACF,IAAK,IACED,EAGHF,GAAgBG,EAFhBH,GAAgB;AAAA,EAAMR,EAAOO,EAAcE,CAAW,CAAC,GAIzD,MACF,IAAK,IACEC,EAGHF,GAAgBG,EAFhBH,GAAgB,KAIlB,MACF,IAAK,IACL,IAAK;AAAA,EACL,IAAK,IACCE,IACFF,GAAgBG,GAElB,MACF,IAAK,IACCN,EAAI,GAAKF,EAAK,OAAOE,EAAI,CAAC,IAAM,OAClCK,EAAW,CAACA,GAEdF,GAAgBG,EAChB,MACF,QACEH,GAAgBG,EAChB,KACJ,CAGF,OAAOH,CACT,CAEAT,EAAQ,OAASG,EAEjB,OAAO,eAAeH,EAAS,aAAc,CAAE,MAAO,EAAK,CAAC,CAC9D,CAAC",
  "names": ["global", "factory", "exports", "repeat", "count", "format", "json", "indent", "i", "length", "indentString", "outputString", "indentLevel", "inString", "currentChar"]
}
